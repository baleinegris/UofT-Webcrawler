# /your-project-root/docker-compose.yml
version: '3.8'

services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant_db
    ports:
      - "6333:6333" # HTTP API
      - "6334:6334" # gRPC API
    volumes: 
      - qdrant_data:/qdrant/storage # For persistent storage
    restart: unless-stopped # Ensure Qdrant restarts if it crashes

  qdrant-interactor:
    image: qdrant-interactor:latest
    build:
      context: ./packages/qdrant-interactor # Build context for your Python service
      dockerfile: Dockerfile            # Assuming you'll have a Dockerfile here
    container_name: qdrant-interactor
    ports:
      - "8000:8000" # Or 50051:50051 if using gRPC
    depends_on:
      - qdrant # Ensure Qdrant starts before the Python service
    environment:
      # Pass Qdrant host to the Python service
      # 'qdrant' is the service name in docker-compose, which resolves to its IP
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333 # Or 6334 for gRPC
    # Add rate limiting variables here if needed
    # - EMBEDDING_CONCURRENCY=5

  web-crawler:
    build:
      context: ./packages/web-crawler
      dockerfile: Dockerfile
    environment:
      - STARTING_URL=https://web.cs.toronto.edu/people/faculty-directory
      - CRAWL_DEPTH=10
  
  web-client:
    build:
      context: ./packages/web-client
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Assuming your web client runs on port 3000
    depends_on:
      - qdrant-interactor # Ensure the Python service is ready before starting the web client
    environment:
      - CHATBOT_URL=http://chatbot:8000 # URL for the Python service
  
# Define the named volume for Qdrant data
volumes:
  qdrant_data:
    # driver: local # Default driver, explicitly stating it